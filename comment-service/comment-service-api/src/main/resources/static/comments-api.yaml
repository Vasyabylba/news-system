openapi: 3.0.3
info:
  title: Comment API
  version: 1.0.0
  description: API for managing news with pagination and filters.

paths:
  /api/v1/news/{newsId}/comments:
    get:
      summary: Get all comments on the news
      operationId: getAllComments
      description: Retrieve a paginated list of comments with optional filters
      parameters:
        - name: newsId
          in: path
          description: Unique identifier of the news
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          description: "Page number (pagination)"
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: "Number of items per page (pagination)"
          required: false
          schema:
            type: integer
            default: 20
        - name: sort
          in: query
          description: "Field and sort order (e.g. createdAt,desc)"
          required: false
          schema:
            type: string
        - name: createdAtGte
          in: query
          description: "Filter news created after or at this date"
          required: false
          schema:
            type: string
            format: date-time
            example: "2025-01-01 14:30:00"
        - name: createdAtLte
          in: query
          description: "Filter news created before or at this date"
          required: false
          schema:
            type: string
            format: date-time
            example: "2025-01-01 14:30:00"
        - name: textContains
          in: query
          description: "Filter comment by text substring"
          required: false
          schema:
            type: string
        - name: username
          in: query
          description: "Filter comment by username"
          required: false
          schema:
            type: string
        - name: usernameStarts
          in: query
          description: "Filter comment by username (starts with)"
          required: false
          schema:
            type: string
            example: "Sophia"
      responses:
        '200':
          description: A paginated list of comments
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentWindowResponse"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"

    post:
      summary: Create comment
      operationId: createComment
      description: Create a new comment item
      parameters:
        - name: newsId
          in: path
          description: Unique identifier of the comment
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreateRequest'
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              oneOf:
                - $ref: '#/components/schemas/GenericErrorResponse'
                - $ref: '#/components/schemas/ValidationErrorResponse'
        '422':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'

  /api/v1/news/{newsId}/comments/{commentId}:
    get:
      summary: Get comment by ID
      operationId: getComment
      description: Retrieve a single comment item by its unique identifier
      parameters:
        - name: newsId
          in: path
          description: Unique identifier of the news
          required: true
          schema:
            type: string
            format: uuid
        - name: commentId
          in: path
          description: Unique identifier of the comment
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A single comment item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              oneOf:
                - $ref: '#/components/schemas/GenericErrorResponse'
                - $ref: '#/components/schemas/ValidationErrorResponse'
        '422':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'

    put:
      summary: Update comment
      operationId: updateComment
      description: Update an existing comment item
      parameters:
        - name: newsId
          in: path
          description: Unique identifier of the news
          required: true
          schema:
            type: string
            format: uuid
        - name: commentId
          in: path
          description: Unique identifier of the comment
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentUpdateRequest'
      responses:
        '200':
          description: Comment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              oneOf:
                - $ref: '#/components/schemas/GenericErrorResponse'
                - $ref: '#/components/schemas/ValidationErrorResponse'
        '422':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'

    delete:
      summary: Delete comment
      operationId: deleteComment
      description: Delete an existing comment item
      parameters:
        - name: newsId
          in: path
          description: Unique identifier of the news
          required: true
          schema:
            type: string
            format: uuid
        - name: commentId
          in: path
          description: Unique identifier of the comment
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Comment deleted successfully
        '400':
          description: Invalid request
          content:
            application/json:
              oneOf:
                - $ref: '#/components/schemas/GenericErrorResponse'
                - $ref: '#/components/schemas/ValidationErrorResponse'
        '422':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorResponse'

components:
  schemas:
    CommentWindowResponse:
      type: object
      properties:
        empty:
          type: boolean
          description: Indicates whether the list of news is empty
          example: "false"
        content:
          type: array
          description: The list of news items
          items:
            $ref: "#/components/schemas/CommentResponse"
        last:
          type: boolean
          description: Indicates whether this is the last page of news
          example: "true"

    CommentCreateRequest:
      type: object
      properties:
        text:
          type: string
          description: Text content of the comment
          example: "This is a comment"
        username:
          type: string
          description: Username of the comment author
          example: "user1"
      required:
        - text
        - username

    CommentResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the comment
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp of the comment
          example: "2025-01-01 14:30:00"
        lastModifiedAt:
          type: string
          format: date-time
          description: Last modification timestamp of the comment
          example: "2025-01-01 14:30:00"
        text:
          type: string
          description: Text content of the comment
          example: "This is a comment"
        username:
          type: string
          description: Username of the comment author
          example: "user1"

    CommentUpdateRequest:
      type: object
      properties:
        text:
          type: string
          description: Text content of the comment
          example: "Updated comment text"
        username:
          type: string
          description: Username of the comment author
          example: "user1"
      required:
        - text
        - username

    GenericErrorResponse:
      type: object
      properties:
        code:
          type: integer
          description: HTTP status code
          example: 422
        status:
          type: string
          description: HTTP status description
          example: "UNPROCESSABLE_ENTITY"
        message:
          type: string
          description: A detailed error message
          example: "Resource with id 'ID' not found"
        time:
          type: string
          format: date-time
          description: Timestamp of the error
          example: "2025-01-01 14:30:00"

    ValidationErrorResponse:
      type: object
      properties:
        code:
          type: integer
          description: HTTP status code
          example: 400
        status:
          type: string
          description: HTTP status description
          example: "BAD_REQUEST"
        errors:
          type: array
          items:
            type: object
            properties:
              property:
                type: string
                description: Invalid request property
                example: "text"
              message:
                type: string
                description: A detailed error message
                example: "Text must not be blank"
        time:
          type: string
          format: date-time
          description: Timestamp of the error
          example: "2025-01-01 14:30:00"
